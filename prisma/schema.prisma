// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model Employee {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String    @unique
  password        String
  isEmailVerified Boolean   @default(false)
  firstname       String
  lastname        String?
  phone           String?
  createdAt       DateTime? @default(now())
  companyId       String    @db.Uuid
  roleId          String    @db.Uuid

  Company    Company                @relation(fields: [companyId], references: [id])
  Role       Role                   @relation(fields: [roleId], references: [id])
  Department EmployeeOnDepartment[]
  Invoice    Invoice[]
}

model Role {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String     @default("employee")
  Employee Employee[]
}

model Company {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  cvr       String    @unique
  createdAt DateTime? @default(now())

  Employees  Employee[]
  Department Department[]
  Invoice    Invoice[]
  Product    Product[]
  Customer   Customer[]
}

model Department {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  isHQ      Boolean   @default(false)
  country   String
  street    String
  city      String
  zip       String
  companyId String    @db.Uuid
  createdAt DateTime? @default(now())

  Company   Company                @relation(fields: [companyId], references: [id])
  Employees EmployeeOnDepartment[]
  Invoice   Invoice[]
}

model EmployeeOnDepartment {
  employeeId   String    @db.Uuid
  departmentId String    @db.Uuid
  dateAdded    DateTime? @default(now())

  Employee   Employee   @relation(fields: [employeeId], references: [id])
  Department Department @relation(fields: [departmentId], references: [id])

  @@id([employeeId, departmentId])
}

model Customer {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String @unique
  firstname String
  lastname  String
  phone     String @unique
  street    String
  city      String
  country   String
  zip       String

  companyId String @db.Uuid

  Company  Company   @relation(fields: [companyId], references: [id])
  Vehicles Vehicle[]
  Invoices Invoice[]
}

model Vehicle {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brand              String
  model              String
  registrationNumber String
  customerId         String    @db.Uuid
  customer           Customer  @relation(fields: [customerId], references: [id])
  createdAt          DateTime? @default(now())
  Invoice            Invoice[]
}

model Invoice {
  id           Int       @unique @default(autoincrement())
  companyId    String    @db.Uuid
  departmentId String    @db.Uuid
  employeeId   String    @db.Uuid
  customerId   String    @db.Uuid
  vehicleId    String    @db.Uuid
  totalPrice   Float
  createdAt    DateTime? @default(now())
  payedAt      DateTime?

  Products Product[]

  Vehicle    Vehicle    @relation(fields: [vehicleId], references: [id])
  Company    Company    @relation(fields: [companyId], references: [id])
  Department Department @relation(fields: [departmentId], references: [id])
  Employee   Employee   @relation(fields: [employeeId], references: [id])
  Customer   Customer   @relation(fields: [customerId], references: [id])

  @@id([id, companyId])
}

model Product {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  price       Float
  companyId   String    @db.Uuid
  createdAt   DateTime? @default(now())
  invoiceId   Int

  Company Company @relation(fields: [companyId], references: [id])
  Invoice Invoice @relation(fields: [invoiceId], references: [id])
}
